-- CREATING CUSTOM WAREHOUSE

CREATE WAREHOUSE TASK WITH WAREHOUSE_SIZE = 'MEDIUM' WAREHOUSE_TYPE = 'STANDARD' AUTO_SUSPEND = 600 AUTO_RESUME = TRUE;

-- CREATING DATABASE

CREATE OR REPLACE DATABASE AW_TASK;
USE AW_TASK;
                                  
 ---------------------------------------------------------------------//TASK-1//--------------------------------------------------------------------------------------
                                    
-- WRITE AN SQL QUERY THAT, FOR EACH "PRODUCT", RETURNS THE TOTAL AMOUNT OF MONEY SPENT ON IT.ROW SHOULD BE ORDERED IN DESCENDING ORDER BY"PRODUCT". 
                                   
CREATE TABLE SHOPPING_HISTORY(
PRODUCT VARCHAR NOT NULL,
QUANTITY INT NOT NULL,
UNIT_PRICE INT NOT NULL
);

INSERT INTO SHOPPING_HISTORY VALUES('MILK',3,10);
INSERT INTO SHOPPING_HISTORY VALUES('BREAD',7,3);
INSERT INTO SHOPPING_HISTORY VALUES('BREAD',5,2);

SELECT * FROM SHOPPING_HISTORY;
 
 SELECT PRODUCT, 
	SUM(QUANTITY*UNIT_PRICE) as TOTAL_PRICE 
    FROM SHOPPING_HISTORY
    GROUP BY PRODUCT
    ORDER BY PRODUCT DESC;
    
 ----------------------------------------------------------------------//TASK-2//--------------------------------------------------------------------------------------  
                     
                                
--(1) WRITE AN SQL QUERY THAT FINDS ALL CLIENTS WHO TALKED FOR AT LEAST 10 MINUTES IN TOTAL.

CREATE OR REPLACE TABLE PHONE(
	NAME VARCHAR NOT NULL UNIQUE,
    PHONE_NUMBER INT NOT NULL
);


CREATE OR REPLACE TABLE CALLS(
ID INT NOT NULL UNIQUE,
CALLER INT NOT NULL,
CALLEE INT NOT NULL,
DURATION INT NOT NULL
); 

-- INSERTING ALL RECORD IN PHONE
INSERT INTO PHONE VALUES('JACK',1234),('LENA',3333),('MARK',9999),('ANNA', 7582);

-- RETRIVING ALL RECORD FROM PHONE
SELECT * FROM PHONE;

-- INSERTING ALL RECORD IN CALLS
INSERT INTO CALLS VALUES( 25,1234,7582,8),(7,9999,7582,1),(18,9999,3333,4),(2,7582,3333,3),(3,3333,1234,1),(21,3333,1234,1);
                        
-- RETRIVING ALL RECORD FROM CALLS
SELECT * FROM CALLS;

--FIND ALL CLIENTS WHO TALKED FOR AT LEAST 10 MINUTES IN TOTAL

CREATE OR REPLACE VIEW PHONE_CALL AS 
SELECT P.NAME , SUM(C.DURATION) AS TOTAL_DURATION FROM CALLS C 
LEFT JOIN PHONE P ON P.PHONE_NUMBER = C.CALLER OR P.PHONE_NUMBER = C.CALLEE 
GROUP BY P.NAME;

-- RETRIVING ALL RECORD FROM VIEW TABLE
SELECT * FROM PHONE_CALL;

SELECT NAME FROM PHONE_CALL WHERE TOTAL_DURATION >= 10 ORDER BY NAME;


---ANOTHER WAY TO SOLVE THIS PROBLEM (USING CTE)

WITH TEST AS (SELECT P.NAME , SUM(C.DURATION) AS TOTAL_DURATION FROM CALLS C 
LEFT JOIN PHONE P ON P.PHONE_NUMBER = C.CALLER OR P.PHONE_NUMBER = C.CALLEE 
GROUP BY P.NAME)
SELECT NAME FROM TEST WHERE TOTAL_DURATION >= 10 ORDER BY NAME;


#(2) 

CREATE TABLE PHONES1(
NAME VARCHAR(30),
PHONE_NUMBER int
);

CREATE TABLE CALLS1(
ID int,
CALLER INT,
CALLEE INT,
DURATION int
);

-- INSERTING ALL RECORD IN PHONES1
INSERT INTO PHONES1 VALUES('JOHN',6356),('ADDISON',4315),('KATE',8003),('GINNY',9831);

-- RETRIVING ALL RECORD FROM PHONES1
SELECT * FROM PHONES1;

-- INSERTING ALL RECORD IN CALLS1

INSERT INTO CALLS1 VALUES(65,8003,9831,7),(100,9831,8003,3),(145,4315,9831,18);
-- RETRIVING ALL RECORD FROM PHONES1
SELECT * FROM CALLS1;

SELECT distinct PH.NAME FROM PHONES1 PH 
INNER JOIN CALLS1 CL ON PH.PHONE_NUMBER = CL.CALLER OR PH.PHONE_NUMBER = CL.CALLEE ORDER BY NAME;


 ----------------------------------------------------------------------//TASK-3//--------------------------------------------------------------------------------------  
	  
                                        
 --EXAMPLE(1)
 
 --CREATING TRANSACTION TABLE
 
CREATE OR REPLACE TABLE TRANSACTION(
AMOUNT INT NOT NULL,
`DATE` DATE NOT NULL
);

--INSERTING RECORD INTO TRANSACTION TABLE
INSERT INTO TRANSACTION VALUES(1000,'2020-01-06'),
(-10,'2020-01-14'),
(-75,'2020-01-20'),
(-5,'2020-01-25'),
(-4,'2020-01-29'),
(2000,'2020-03-10'),
(-75,'2020-03-12'),
(-20,'2020-03-15'),
(40,'2020-03-15'),
(-50,'2020-03-17'),
(200,'2020-10-10'),
(-200,'2020-10-10');
                                
--RETREIVING ALL RECORD FROM TRANSACTION
select * from TRANSACTION;


--GET BALANCE AT THE END OF YEAR ACCORDING GIVEN CONDITION

SELECT SUM(CASE WHEN CRT_PMNT_CNT >=3 AND TOTAL_CRT_PMNT <= -100 THEN MONTH_AMOUNT+5 ELSE MONTH_AMOUNT END) - 60 AS BALANCE FROM(
SELECT
	COUNT(CASE WHEN AMOUNT < 0 THEN AMOUNT END) AS CRT_PMNT_CNT,
    SUM(CASE WHEN AMOUNT <= 0 THEN AMOUNT ELSE 0 END) AS TOTAL_CRT_PMNT,
    SUM(AMOUNT) AS MONTH_AMOUNT
    FROM TRANSACTION
    GROUP BY MONTH(`DATE`)
) AS TRANSACTION_FINAL;


--EXAMPLE(2)

 --CREATING TRANSACTION2 TABLE 
CREATE OR REPLACE TABLE TRANSACTION2(
AMOUNT INT NOT NULL,
DATE DATE NOT NULL
);

--INSERTING RECORD INTO TRANSACTION2 TABLE
INSERT INTO TRANSACTION2 VALUES(1,'2020-06-29'),
(35,'2020-02-20'),
(-50,'2020-02-03'),
(-1,'2020-02-26'),
(-200,'2020-08-01'),
(-44,'2020-02-07'),
(-5,'2020-02-25'),
(1,'2020-06-29'),
(1,'2020-06-29'),
(-100,'2020-12-29'),
(-100,'2020-12-30'),
(-100,'2020-12-31');


--RETREIVING ALL RECORD FROM TRANSACTION2
select * from TRANSACTION2;

--GET BALANCE AT THE END OF YEAR ACCORDING GIVEN CONDITION
SELECT SUM(CASE WHEN CRT_PMNT_CNT >=3 AND TOTAL_CRT_PMNT <= -100 THEN MONTH_AMOUNT+5 ELSE MONTH_AMOUNT END) - 60 AS BALANCE FROM(
SELECT
	COUNT(CASE WHEN AMOUNT < 0 THEN AMOUNT END) AS CRT_PMNT_CNT,
    SUM(CASE WHEN AMOUNT <= 0 THEN AMOUNT ELSE 0 END) AS TOTAL_CRT_PMNT,
    SUM(AMOUNT) AS MONTH_AMOUNT,MONTH(DATE)
    FROM TRANSACTION2
    GROUP BY MONTH(DATE)
) AS TRANSACTION_FINAL2;


--EXAMPLE(3)

--CREATING TRANSACTION2 TABLE
CREATE TABLE TRANSACTION3(
AMOUNT INT NOT NULL,
DATE DATE NOT NULL
);

--INSERTING RECORD INTO TRANSACTION3 TABLE
INSERT INTO TRANSACTION3 VALUES(6000,'2020-04-03'),
(5000,'2020-04-02'),
(4000,'2020-04-01'),
(3000,'2020-03-01'),
(2000,'2020-02-01'),
(1000,'2020-01-01');

--RETREIVING ALL RECORD FROM TRANSACTION3
SELECT * FROM TRANSACTION3;

--GET BALANCE AT THE END OF YEAR ACCORDING GIVEN CONDITION
SELECT SUM(AMOUNT) -12*5 FROM TRANSACTION3;